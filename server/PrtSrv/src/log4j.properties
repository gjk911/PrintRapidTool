#log4j.rootLogger=LEVEL,myAppender0,myAppender1
#LEVEL为如下7种等级 OFF > FATAL > ERROR > WARN > INFO > DEBUG > ALL
#OFF   是最高等级的，用于关闭所有日志记录。 
#FATAL 指出每个严重的错误事件将会导致应用程序的退出。
#ERROR 指出虽然发生错误事件，但仍然不影响系统的继续运行。
#WARN  表明会出现潜在错误的情形。
#INFO  表明 消息在粗粒度级别上突出强调应用程序的运行过程。
#DEBUG 指出细粒度信息事件对调试应用程序是非常有帮助的。
#ALL   是最低等级的，用于打开所有日志记录。
#myAppender0,myAppender1...是自定义日志信息输出到什么地方
#可以同时指定多个输出目的地。主要有如下几种输出目标类型：
#1.ConsoleAppender:使用用户指定的布局(layout) 输出日志事件到System.out或者 System.err。默认的目标是System.out。
#2.DailyRollingFileAppender 扩展FileAppender，因此多个日志文件可以以一个用户选定的频率进行循环日志记录。
#3.FileAppender 把日志事件写入一个文件
#4.RollingFileAppender 扩展FileAppender备份容量达到一定大小的日志文件。
#5.WriterAppender根据用户的选择把日志事件写入到Writer或者OutputStream。
#6.SMTPAppender 当特定的日志事件发生时，一般是指发生错误或者重大错误时，发送一封邮件。
#7.SocketAppender 给远程日志服务器（通常是网络套接字节点）发送日志事件（LoggingEvent）对象。
#8.SocketHubAppender 给远程日志服务器群组（通常是网络套接字节点）发送日志事件（LoggingEvent）对象。
#9.SyslogAppender给远程异步日志记录的后台精灵程序(daemon)发送消息。
#10.TelnetAppender 一个专用于向只读网络套接字发送消息的log4j appender。
#ps：还可以实现 Appender 接口，创建以自己的方式进行日志输出的Appender。
log4j.rootLogger=DEBUG,MyConsoleAppender,MyFileAppender
#log4j.rootCategory=DEBUG,MyConsoleAppender,MyFileAppender
#rootLogger是新的使用名称，对应Logger类;rootCategory是旧的使用名称，对应原来的Category类
#Logger类是Category类的子类，所以，rootCategory是旧的用法，不推荐使用

#
log4j.appender.MyConsoleAppender=org.apache.log4j.ConsoleAppender
#常用的布局管理器:
#org.apache.log4j.HTMLLayout（以HTML表格形式布局）
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式）
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.MyConsoleAppender.layout=org.apache.log4j.PatternLayout
#其中常用的格式有：
#%m   输出代码中指定的消息 
#%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#%r   输出自应用启动到输出该log信息耗费的毫秒数 
#%c   输出所属的类目，通常就是所在类的全名 
#%t   输出产生该日志事件的线程名 
#%n   输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n” 
#%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}
#%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10) 
#log4j的缩进格式化类似于c语言中的 printf 的格式定义：
#    1)%20c：指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，默认的情况下右对齐。 
#    2)%-20c:指定输出category的名称，最小的宽度是20，如果category的名称小于20的话，"-"号指定左对齐。 
#    3)%.30c:指定输出category的名称，最大的宽度是30，如果category的名称大于30的话，就会将左边多出的字符截掉，但小于30的话也不会有空格。 
#    4)%20.30c:如果category的名称小于20就补空格，并且右对齐，如果其名称长于30字符，就从左边交远销出的字符截掉。
log4j.appender.MyConsoleAppender.layout.ConversionPattern=%d{yyyy-MM-dd HH\:mm\:ss,SSS} %-5p %c{1} @@ %m%n

#
log4j.appender.MyFileAppender=org.apache.log4j.RollingFileAppender
log4j.appender.MyFileAppender.File=${catalina.base}/logs/LocalSrv.log
log4j.appender.MyFileAppender.MaxFileSize=2048KB
log4j.appender.MyFileAppender.MaxBackupIndex=10
log4j.appender.MyFileAppender.layout=org.apache.log4j.PatternLayout
log4j.appender.MyFileAppender.layout.ConversionPattern=[%d] %p | %m | [%t] %C(%L)%n